/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useFrame, useLoader } from 'react-three-fiber'
import { useGLTF } from '@react-three/drei/core/useGLTF'
import { useAnimations } from '@react-three/drei/core/useAnimations'
import { getMouseDegrees } from '../../utils'

function moveJoint(mouse, joint, degreeLimit = 40) {
  let degrees = getMouseDegrees(mouse.current.x, mouse.current.y, degreeLimit)
  joint.rotation.xD = THREE.MathUtils.lerp(joint.rotation.xD || 0, degrees.y, 0.1)
  joint.rotation.yD = THREE.MathUtils.lerp(joint.rotation.yD || 0, degrees.x, 0.1)
  joint.rotation.x = THREE.Math.degToRad(joint.rotation.xD)
  joint.rotation.y = THREE.Math.degToRad(joint.rotation.yD)
}


export default function Model({ mouse, ...props}) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/cowboy.gltf')
  const texture = useLoader(THREE.TextureLoader, "/stacy.jpg")

  //const { actions } = useAnimations(animations, group)
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  //useEffect(() => void mixer.clipAction(animations[0], group.current).play(), [])
  console.log(nodes);
  useFrame((state, delta) => {
    mixer.update(delta)
    // console.log(nodes);
    nodes.forearmL.rotation.z -= Math.sin( delta ) * 0.80;
    nodes.forearmR.rotation.z += Math.sin( delta ) * 0.80;
    // console.log(nodes.Armature.rotation.z);
    moveJoint(mouse, nodes.neck)
    moveJoint(mouse, nodes.spine)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.hips} />
      <skinnedMesh
        ref={group}
        receiveShadow castShadow
        material={materials.tinycowboy_material}
        geometry={nodes.Cowboy.geometry}
        skeleton={nodes.Cowboy.skeleton}

        ><meshStandardMaterial map={texture} map-flipY={false} skinning />
      </skinnedMesh>
      {/*<mesh material={nodes.CowboyHP.material} geometry={nodes.CowboyHP.geometry} />*/}
    </group>
  )
}

useGLTF.preload('/cowboy.gltf')
